
//@version=5
indicator("Pivot Points Standard + TD", "Pivots + TD", overlay=true, max_lines_count=500, max_labels_count=500)

AUTO = "Auto"
DAILY = "Daily"
WEEKLY = "Weekly"
MONTHLY = "Monthly"
QUARTERLY = "Quarterly"
YEARLY = "Yearly"
BIYEARLY = "Biyearly"
TRIYEARLY = "Triyearly"
QUINQUENNIALLY = "Quinquennially"
DECENNIALLY = "Decennially"

TRADITIONAL = "Traditional"
FIBONACCI = "Fibonacci"
WOODIE = "Woodie"
CLASSIC = "Classic"
DM = "DM"
CAMARILLA = "Camarilla"

kind = input.string(title="Type", defval="Traditional", options=[TRADITIONAL, FIBONACCI, WOODIE, CLASSIC, DM, CAMARILLA], group = "PIVOT")
pivot_time_frame = input.string(title="Pivots Timeframe", defval=AUTO, options=[AUTO, DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY, BIYEARLY, TRIYEARLY, QUINQUENNIALLY, DECENNIALLY], group = "PIVOT")
look_back = input.int(title="Number of Pivots Back", defval=15, minval=1, maxval=5000, group = "PIVOT")
is_daily_based = input.bool(title="Use Daily-based Values", defval=true, group = "PIVOT", tooltip="When this option is unchecked, Pivot Points will use intraday data while calculating on intraday charts. If Extended Hours are displayed on the chart, they will be taken into account during the pivot level calculation. If intraday OHLC values are different from daily-based values (normal for stocks), the pivot levels will also differ.")
show_labels = input.bool(title="Show Labels", defval=true, group="labels")
show_prices = input.bool(title="Show Prices", defval=true, group="labels")
position_labels = input.string("Left", "Labels Position", options=["Left", "Right"], group="labels")
line_width = input.int(title="Line Width", defval=1, minval=1, maxval=100, group="levels")

var DEF_COLOR = #FB8C00
var arr_time = array.new_int()
var p = array.new_float()
p_color = input.color(DEF_COLOR, "P‏  ‏  ‏", inline="P", group="levels")
p_show = input.bool(true, "", inline="P", group="levels")
var r1 = array.new_float()
var s1 = array.new_float()
s1_color = input.color(DEF_COLOR, "S1", inline="S1/R1" , group="levels")
s1_show = input.bool(true, "", inline="S1/R1", group="levels")
r1_color = input.color(DEF_COLOR, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R1", inline="S1/R1", group="levels")
r1_show = input.bool(true, "", inline="S1/R1", group="levels")
var r2 = array.new_float()
var s2 = array.new_float()
s2_color = input.color(DEF_COLOR, "S2", inline="S2/R2", group="levels")
s2_show = input.bool(true, "", inline="S2/R2", group="levels")
r2_color = input.color(DEF_COLOR, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R2", inline="S2/R2", group="levels")
r2_show = input.bool(true, "", inline="S2/R2", group="levels")
var r3 = array.new_float()
var s3 = array.new_float()
s3_color = input.color(DEF_COLOR, "S3", inline="S3/R3", group="levels")
s3_show = input.bool(true, "", inline="S3/R3", group="levels")
r3_color = input.color(DEF_COLOR, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R3", inline="S3/R3", group="levels")
r3_show = input.bool(true, "", inline="S3/R3", group="levels")
var r4 = array.new_float()
var s4 = array.new_float()
s4_color = input.color(DEF_COLOR, "S4", inline="S4/R4", group="levels")
s4_show = input.bool(true, "", inline="S4/R4", group="levels")
r4_color = input.color(DEF_COLOR, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R4", inline="S4/R4", group="levels")
r4_show = input.bool(true, "", inline="S4/R4", group="levels")
var r5 = array.new_float()
var s5 = array.new_float()
s5_color = input.color(DEF_COLOR, "S5", inline="S5/R5", group="levels")
s5_show = input.bool(true, "", inline="S5/R5", group="levels")
r5_color = input.color(DEF_COLOR, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R5", inline="S5/R5", group="levels")
r5_show = input.bool(true, "", inline="S5/R5", group="levels")
pivotX_open = float(na)
pivotX_open := nz(pivotX_open[1], open)
pivotX_high = float(na)
pivotX_high := nz(pivotX_high[1], high)
pivotX_low = float(na)
pivotX_low := nz(pivotX_low[1], low)
pivotX_prev_open = float(na)
pivotX_prev_open := nz(pivotX_prev_open[1])
pivotX_prev_high = float(na)
pivotX_prev_high := nz(pivotX_prev_high[1])
pivotX_prev_low = float(na)
pivotX_prev_low := nz(pivotX_prev_low[1])
pivotX_prev_close = float(na)
pivotX_prev_close := nz(pivotX_prev_close[1])

get_pivot_resolution() =>
    resolution = "M"
    if pivot_time_frame == AUTO
        if timeframe.isintraday
            resolution := timeframe.multiplier <= 15 ? "D" : "W"
        else if timeframe.isweekly or timeframe.ismonthly
            resolution := "12M"
    else if pivot_time_frame == DAILY
        resolution := "D"
    else if pivot_time_frame == WEEKLY
        resolution := "W"
    else if pivot_time_frame == MONTHLY
        resolution := "M"
    else if pivot_time_frame == QUARTERLY
        resolution := "3M"
    else if pivot_time_frame == YEARLY or pivot_time_frame == BIYEARLY or pivot_time_frame == TRIYEARLY or pivot_time_frame == QUINQUENNIALLY or pivot_time_frame == DECENNIALLY
        resolution := "12M"
    resolution

var lines = array.new_line()
var labels = array.new_label()

draw_line(i, pivot, col) =>
    if array.size(arr_time) > 1
        array.push(lines, line.new(array.get(arr_time, i), array.get(pivot, i), array.get(arr_time, i + 1), array.get(pivot, i), color=col, xloc=xloc.bar_time, width=line_width))

draw_label(i, y, txt, txt_color) =>
    if (show_labels or show_prices) and not na(y)
        display_text = (show_labels ? txt : "") + (show_prices ? str.format(" ({0})", math.round_to_mintick(y)) : "")
        label_style = position_labels == "Left" ? label.style_label_right : label.style_label_left
        x = position_labels == "Left" ? array.get(arr_time, i) : array.get(arr_time, i + 1)
        array.push(labels, label.new(x = x, y=y, text=display_text, textcolor=txt_color, style=label_style, color=#00000000, xloc=xloc.bar_time))

traditional() =>
    pivotX_Median = (pivotX_prev_high + pivotX_prev_low + pivotX_prev_close) / 3
    array.push(p, pivotX_Median)
    array.push(r1, pivotX_Median * 2 - pivotX_prev_low)
    array.push(s1, pivotX_Median * 2 - pivotX_prev_high)
    array.push(r2, pivotX_Median + 1 * (pivotX_prev_high - pivotX_prev_low))
    array.push(s2, pivotX_Median - 1 * (pivotX_prev_high - pivotX_prev_low))
    array.push(r3, pivotX_Median * 2 + (pivotX_prev_high - 2 * pivotX_prev_low))
    array.push(s3, pivotX_Median * 2 - (2 * pivotX_prev_high - pivotX_prev_low))
    array.push(r4, pivotX_Median * 3 + (pivotX_prev_high - 3 * pivotX_prev_low))
    array.push(s4, pivotX_Median * 3 - (3 * pivotX_prev_high - pivotX_prev_low))
    array.push(r5, pivotX_Median * 4 + (pivotX_prev_high - 4 * pivotX_prev_low))
    array.push(s5, pivotX_Median * 4 - (4 * pivotX_prev_high - pivotX_prev_low))

fibonacci() =>
    pivotX_Median = (pivotX_prev_high + pivotX_prev_low + pivotX_prev_close) / 3
    pivot_range = pivotX_prev_high - pivotX_prev_low
    array.push(p, pivotX_Median)
    array.push(r1, pivotX_Median + 0.382 * pivot_range)
    array.push(s1, pivotX_Median - 0.382 * pivot_range)
    array.push(r2, pivotX_Median + 0.618 * pivot_range)
    array.push(s2, pivotX_Median - 0.618 * pivot_range)
    array.push(r3, pivotX_Median + 1 * pivot_range)
    array.push(s3, pivotX_Median - 1 * pivot_range)

woodie() =>
    pivotX_Woodie_Median = (pivotX_prev_high + pivotX_prev_low + pivotX_open * 2)/4
    pivot_range = pivotX_prev_high - pivotX_prev_low
    array.push(p, pivotX_Woodie_Median)
    array.push(r1, pivotX_Woodie_Median * 2 - pivotX_prev_low)
    array.push(s1, pivotX_Woodie_Median * 2 - pivotX_prev_high)
    array.push(r2, pivotX_Woodie_Median + 1 * pivot_range)
    array.push(s2, pivotX_Woodie_Median - 1 * pivot_range)

    pivot_point_r3 = pivotX_prev_high + 2 * (pivotX_Woodie_Median - pivotX_prev_low)
    pivot_point_s3 = pivotX_prev_low - 2 * (pivotX_prev_high - pivotX_Woodie_Median)
    array.push(r3, pivot_point_r3)
    array.push(s3, pivot_point_s3)
    array.push(r4, pivot_point_r3 + pivot_range)
    array.push(s4, pivot_point_s3 - pivot_range)

classic() =>
    pivotX_Median = (pivotX_prev_high + pivotX_prev_low + pivotX_prev_close)/3
    pivot_range = pivotX_prev_high - pivotX_prev_low
    array.push(p, pivotX_Median)
    array.push(r1, pivotX_Median * 2 - pivotX_prev_low)
    array.push(s1, pivotX_Median * 2 - pivotX_prev_high)
    array.push(r2, pivotX_Median + 1 * pivot_range)
    array.push(s2, pivotX_Median - 1 * pivot_range)
    array.push(r3, pivotX_Median + 2 * pivot_range)
    array.push(s3, pivotX_Median - 2 * pivot_range)
    array.push(r4, pivotX_Median + 3 * pivot_range)
    array.push(s4, pivotX_Median - 3 * pivot_range)

dm() =>
    pivotX_DM_X = pivotX_prev_high + pivotX_prev_low * 2 + pivotX_prev_close
    if pivotX_prev_close == pivotX_prev_open
        pivotX_DM_X := pivotX_prev_high + pivotX_prev_low + pivotX_prev_close * 2
    if pivotX_prev_close > pivotX_prev_open
        pivotX_DM_X := pivotX_prev_high * 2 + pivotX_prev_low + pivotX_prev_close
    array.push(p, pivotX_DM_X / 4)
    array.push(r1, pivotX_DM_X / 2 - pivotX_prev_low)
    array.push(s1, pivotX_DM_X / 2 - pivotX_prev_high)

camarilla() =>
    pivotX_Median = (pivotX_prev_high + pivotX_prev_low + pivotX_prev_close) / 3
    pivot_range = pivotX_prev_high - pivotX_prev_low
    array.push(p, pivotX_Median)
    array.push(r1, pivotX_prev_close + pivot_range * 1.1 / 12.0)
    array.push(s1, pivotX_prev_close - pivot_range * 1.1 / 12.0)
    array.push(r2, pivotX_prev_close + pivot_range * 1.1 / 6.0)
    array.push(s2, pivotX_prev_close - pivot_range * 1.1 / 6.0)
    array.push(r3, pivotX_prev_close + pivot_range * 1.1 / 4.0)
    array.push(s3, pivotX_prev_close - pivot_range * 1.1 / 4.0)
    array.push(r4, pivotX_prev_close + pivot_range * 1.1 / 2.0)
    array.push(s4, pivotX_prev_close - pivot_range * 1.1 / 2.0)
    r5_val = pivotX_prev_high / pivotX_prev_low * pivotX_prev_close
	array.push(r5, r5_val)
	array.push(s5, 2 * pivotX_prev_close - r5_val)

calc_pivot() =>
    if kind == TRADITIONAL
        traditional()
    else if kind == FIBONACCI
        fibonacci()
    else if kind == WOODIE
        woodie()
    else if kind == CLASSIC
        classic()
    else if kind == DM
        dm()
    else if kind == CAMARILLA
        camarilla()

resolution = get_pivot_resolution()

SIMPLE_DIVISOR = -1
custom_years_divisor = switch pivot_time_frame
	BIYEARLY => 2
	TRIYEARLY => 3
	QUINQUENNIALLY => 5
	DECENNIALLY => 10
	=> SIMPLE_DIVISOR

calc_high(prev, curr) =>
    if na(prev) or na(curr)
        nz(prev, nz(curr, na))
    else
        math.max(prev, curr)
    
calc_low(prev, curr) =>
    if not na(prev) and not na(curr)
        math.min(prev, curr)
    else
        nz(prev, nz(curr, na))

calc_OHLC_for_pivot(custom_years_divisor) =>
    if custom_years_divisor == SIMPLE_DIVISOR 
        [open, high, low, close, open[1], high[1], low[1], close[1], time[1], time_close]
    else
        var prev_sec_open = float(na)
        var prev_sec_high = float(na)
        var prev_sec_low = float(na)
        var prev_sec_close = float(na)
        var prev_sec_time = int(na)
        var curr_sec_open = float(na)
        var curr_sec_high = float(na)
        var curr_sec_low = float(na)
        var curr_sec_close = float(na)
        if year(time_close) % custom_years_divisor == 0
        	curr_sec_open := open
			curr_sec_high := high
			curr_sec_low := low
			curr_sec_close := close
            prev_sec_high := high[1]
            prev_sec_low := low[1]
            prev_sec_close := close[1]
            prev_sec_time := time[1]
            for i = 2 to custom_years_divisor
                prev_sec_open :=  nz(open[i], prev_sec_open)
                prev_sec_high := calc_high(prev_sec_high, high[i])
                prev_sec_low := calc_low(prev_sec_low, low[i])
                prev_sec_time := nz(time[i], prev_sec_time)
        [curr_sec_open, curr_sec_high, curr_sec_low, curr_sec_close, prev_sec_open, prev_sec_high, prev_sec_low, prev_sec_close, prev_sec_time, time_close]

[sec_open, sec_high, sec_low, sec_close, prev_sec_open, prev_sec_high, prev_sec_low, prev_sec_close, prev_sec_time, sec_time] = request.security(syminfo.tickerid, resolution, calc_OHLC_for_pivot(custom_years_divisor), lookahead = barmerge.lookahead_on)
sec_open_gaps_on = request.security(syminfo.tickerid, resolution, open, gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on)

is_change_years = custom_years_divisor > 0 and ta.change(time(resolution)) != 0 and year(time_close) % custom_years_divisor == 0

var is_change = false
var uses_current_bar = timeframe.isintraday and kind == WOODIE
var change_time = int(na)
is_time_change = (ta.change(time(resolution) != 0) and custom_years_divisor == SIMPLE_DIVISOR) or is_change_years
if is_time_change
    change_time := time

var start_time = time
var was_last_premarket = false
var start_calculate_in_premarket = false

is_last_premarket = barstate.islast and session.ispremarket and time_close > sec_time and not was_last_premarket

if is_last_premarket
    was_last_premarket := true
    start_calculate_in_premarket := true
if session.ismarket
    was_last_premarket := false
    
without_time_change = barstate.islast and array.size(arr_time) == 0
is_can_calc_pivot = (not uses_current_bar and is_time_change and session.ismarket) or (ta.change(sec_open) != 0 and not start_calculate_in_premarket) or is_last_premarket or (uses_current_bar and not na(sec_open_gaps_on)) or without_time_change
enough_bars_for_calculate = prev_sec_time >= start_time or is_daily_based

if is_can_calc_pivot and enough_bars_for_calculate 
    if array.size(arr_time) == 0 and is_daily_based
        pivotX_prev_open := prev_sec_open[1]
        pivotX_prev_high := prev_sec_high[1]
        pivotX_prev_low := prev_sec_low[1]
        pivotX_prev_close := prev_sec_close[1]
        pivotX_open := sec_open[1]
        pivotX_high := sec_high[1]
        pivotX_low := sec_low[1]
        array.push(arr_time, start_time)
        calc_pivot()
    
    if is_daily_based
    	if is_last_premarket
            pivotX_prev_open := sec_open
            pivotX_prev_high := sec_high
            pivotX_prev_low := sec_low
            pivotX_prev_close := sec_close
            pivotX_open := open
            pivotX_high := high
            pivotX_low := low
        else
			pivotX_prev_open := prev_sec_open
			pivotX_prev_high := prev_sec_high
			pivotX_prev_low := prev_sec_low
			pivotX_prev_close := prev_sec_close
			pivotX_open := sec_open
			pivotX_high := sec_high
			pivotX_low := sec_low
    else
        pivotX_prev_high := pivotX_high
        pivotX_prev_low := pivotX_low
        pivotX_prev_open := pivotX_open
        pivotX_prev_close := close[1]
        pivotX_open := open
        pivotX_high := high
        pivotX_low := low

    if barstate.islast and not is_change and array.size(arr_time) > 0 and not without_time_change
        array.set(arr_time, array.size(arr_time) - 1, change_time)
    else if without_time_change
        array.push(arr_time, start_time)
    else
        array.push(arr_time, nz(change_time, time))

    calc_pivot()

    if array.size(arr_time) > look_back
        if array.size(arr_time) > 0
            array.shift(arr_time)
        if array.size(p) > 0 and p_show
            array.shift(p)
        if array.size(r1) > 0 and r1_show
            array.shift(r1)
        if array.size(s1) > 0 and s1_show
            array.shift(s1)
        if array.size(r2) > 0 and r2_show
            array.shift(r2)
        if array.size(s2) > 0 and s2_show
            array.shift(s2)
        if array.size(r3) > 0 and r3_show
            array.shift(r3)
        if array.size(s3) > 0 and s3_show
            array.shift(s3)
        if array.size(r4) > 0 and r4_show
            array.shift(r4)
        if array.size(s4) > 0 and s4_show
            array.shift(s4)
        if array.size(r5) > 0 and r5_show
            array.shift(r5)
        if array.size(s5) > 0 and s5_show
            array.shift(s5)
    is_change := true
else if not is_daily_based
    pivotX_high := math.max(pivotX_high, high)
    pivotX_low := math.min(pivotX_low, low)

if barstate.islast and not is_daily_based and array.size(arr_time) == 0 
    runtime.error("Not enough intraday data to calculate Pivot Points. Lower the Pivots Timeframe or turn on the 'Use Daily-based Values' option in the indicator settings.")

if barstate.islast and array.size(arr_time) > 0 and is_change
    is_change := false
    if custom_years_divisor > 0
        last_pivot_time = array.get(arr_time, array.size(arr_time) - 1)
        pivot_timeframe = str.tostring(12 * custom_years_divisor) + "M"
        estimate_pivot_time = last_pivot_time + timeframe.in_seconds(pivot_timeframe) * 1000
        array.push(arr_time, estimate_pivot_time)
    else
        array.push(arr_time, time_close(resolution))

    for i = 0 to array.size(lines) - 1
        if array.size(lines) > 0
            line.delete(array.shift(lines))
        if array.size(labels) > 0
            label.delete(array.shift(labels))

    for i = 0 to array.size(arr_time) - 2
        if array.size(p) > 0 and p_show
            draw_line(i, p, p_color)
            draw_label(i, array.get(p, i), "P", p_color)
        if array.size(r1) > 0 and r1_show
            draw_line(i, r1, r1_color)
            draw_label(i, array.get(r1, i), "R1", r1_color)
        if array.size(s1) > 0 and s1_show
            draw_line(i, s1, s1_color)
            draw_label(i, array.get(s1, i), "S1", s1_color)
        if array.size(r2) > 0 and r2_show
            draw_line(i, r2, r2_color)
            draw_label(i, array.get(r2, i), "R2", r2_color)
        if array.size(s2) > 0 and s2_show
            draw_line(i, s2, s2_color)
            draw_label(i, array.get(s2, i), "S2", s2_color)
        if array.size(r3) > 0 and r3_show
            draw_line(i, r3, r3_color)
            draw_label(i, array.get(r3, i), "R3", r3_color)
        if array.size(s3) > 0 and s3_show
            draw_line(i, s3, s3_color)
            draw_label(i, array.get(s3, i), "S3", s3_color)
        if array.size(r4) > 0 and r4_show
            draw_line(i, r4, r4_color)
            draw_label(i, array.get(r4, i), "R4", r4_color)
        if array.size(s4) > 0 and s4_show
            draw_line(i, s4, s4_color)
            draw_label(i, array.get(s4, i), "S4", s4_color)
        if array.size(r5) > 0 and r5_show
            draw_line(i, r5, r5_color)
            draw_label(i, array.get(r5, i), "R5", r5_color)
        if array.size(s5) > 0 and s5_show
            draw_line(i, s5, s5_color)
            draw_label(i, array.get(s5, i), "S5", s5_color)



// ==============================================
// TD Sequential - Setup and Countdown
// Igor Molnar, 2018. Convert to version5 by SM19
// ==============================================
// Tom DeMark's Sequential indicator with both Setup and Countdown components implemented 
// according to the rules outlined in: DeMark Indicators by Jason Perl (Bloomberg Market Essentials)
// 
// Feel free to PM me your comments, suggestions and bug reports at https://www.tradingview.com/u/Yngvar/

// OPTIONAL PARAMETERS //

// transp            = input(0, title="Number Transparency", group = "TD")
priceFlipRequired = input(true, title="Setup - Require price flip for initiation", group = "TD")
showBuySetup      = input(true, title="Setup - Show Buy Setup", group = "TD")
showSellSetup     = input(true, title="Setup - Show Sell Setup", group = "TD")
showOnlySetupNine = input(false,title="Setup - Show Only Completed Nines", group = "TD")
showResistance    = input(true, title="Setup Trend - Show Resistance Lines", group = "TD")
showSupport       = input(true, title="Setup Trend - Show Support Lines", group = "TD")
showBuyCountdown  = input(true, title="Countdown - Show Buy Countdown", group = "TD")
showSellCountdown = input(true, title="Countdown - Show Sell Countdown", group = "TD")
showRiskLines     = input(false, title="Risk Lines - Show (Beta)", group = "TD")

// PRICE FLIP AND SETUP //
buySetup = 0
buySetup := if close < close[4]
    if priceFlipRequired
        if close[1] > close[5] or 0 < nz(buySetup[1])
            nz(buySetup[1]) + 1
        else
            0
    else
        if nz(buySetup[1]) == 9
            1
        else
            nz(buySetup[1]) + 1
else
    0

sellSetup = 0
sellSetup := if close > close[4]
    if priceFlipRequired
        if close[1] < close[5] or 0 < nz(sellSetup[1])
            nz(sellSetup[1]) + 1
        else
            0
    else
        if nz(sellSetup[1]) == 9
            1
        else
            nz(sellSetup[1]) + 1
else
    0

// PERFECTED SETUP CONDITIONS //

sellPerfection = sellSetup==9 and ((high > high[2] and high > high[3]) or (high[1] > high[2] and high[1] > high[3]))
buyPerfection  = buySetup==9 and ((low < low[2] and low < low[3]) or (low[1] < low[2] and low[1] < low[3]))

// NUMBER PLOTS //

plotchar(sellSetup==1 and showSellSetup and not showOnlySetupNine,char='1',color = color.green,location=location.abovebar)
plotchar(sellSetup==2 and showSellSetup and not showOnlySetupNine,char='2',color = color.green,location=location.abovebar)
plotchar(sellSetup==3 and showSellSetup and not showOnlySetupNine,char='3',color = color.green,location=location.abovebar)
plotchar(sellSetup==4 and showSellSetup and not showOnlySetupNine,char='4',color = color.green,location=location.abovebar)
plotchar(sellSetup==5 and showSellSetup and not showOnlySetupNine,char='5',color = color.green,location=location.abovebar)
plotchar(sellSetup==6 and showSellSetup and not showOnlySetupNine,char='6',color = color.green,location=location.abovebar)
plotchar(sellSetup==7 and showSellSetup and not showOnlySetupNine,char='7',color = color.green,location=location.abovebar)
plotchar(sellSetup==8 and showSellSetup and not showOnlySetupNine,char='8',color = color.green,location=location.abovebar)
plotshape(sellSetup==9 and showSellSetup and not sellPerfection,style=shape.arrowdown,size=size.small,color = color.red,location=location.abovebar,text="9",textcolor = color.green)
plotshape(sellPerfection and showSellSetup,style=shape.arrowdown,size=size.small,color = color.red,location=location.abovebar,text="9P",textcolor = color.green)

plotchar(buySetup==1 and showBuySetup and not showOnlySetupNine,char='1',color = color.red,location=location.abovebar)
plotchar(buySetup==2 and showBuySetup and not showOnlySetupNine,char='2',color = color.red,location=location.abovebar)
plotchar(buySetup==3 and showBuySetup and not showOnlySetupNine,char='3',color = color.red,location=location.abovebar)
plotchar(buySetup==4 and showBuySetup and not showOnlySetupNine,char='4',color = color.red,location=location.abovebar)
plotchar(buySetup==5 and showBuySetup and not showOnlySetupNine,char='5',color = color.red,location=location.abovebar)
plotchar(buySetup==6 and showBuySetup and not showOnlySetupNine,char='6',color = color.red,location=location.abovebar)
plotchar(buySetup==7 and showBuySetup and not showOnlySetupNine,char='7',color = color.red,location=location.abovebar)
plotchar(buySetup==8 and showBuySetup and not showOnlySetupNine,char='8',color = color.red,location=location.abovebar)
plotshape(buyPerfection and showBuySetup,style=shape.arrowup,size=size.small,color = color.green,location=location.abovebar,text="9P",textcolor = color.red)
plotshape(buySetup==9 and not buyPerfection and showBuySetup,style=shape.arrowup,size=size.small,color = color.green,location=location.abovebar,text="9",textcolor = color.red)

// ALERTS //

alertcondition(ta.barssince(sellSetup == 9) == 1, title='Sell Setup Completed', message='TD Sell Setup Completed')
alertcondition(ta.barssince(buySetup == 9) == 1, title='Buy Setup Completed', message='TD Buy Setup Completed')

// SETUP TREND LINES //
float TDSTSupport = na
lowest9 = ta.lowest(low, 9)
TDSTSupport := sellSetup == 9 ? lowest9 : nz(TDSTSupport[1])
TDSTSupportIntact = close >= TDSTSupport and (ta.barssince(close < TDSTSupport) > ta.barssince(sellSetup == 9))
plot(TDSTSupportIntact and showSupport ? TDSTSupport : na, style=plot.style_circles, linewidth=1, color = color.green)

float TDSTResistance = na
highest9 = ta.highest(high, 9)
TDSTResistance := buySetup == 9 ? highest9 : nz(TDSTResistance[1])
TDSTResistanceIntact = close <= TDSTResistance and (ta.barssince(close > TDSTResistance) > ta.barssince(buySetup == 9))
plot(TDSTResistanceIntact and showResistance ? TDSTResistance : na, style=plot.style_circles, linewidth=1, color = color.red)

// COUNTDOWN - BUY //

// Cancelation Filter
sinceBuyNine      = ta.barssince(buySetup == 9)
sinceSellNine     = ta.barssince(sellSetup == 9)
lastSetupIsBuy    = sinceBuyNine < sinceSellNine // last completed setup is a buy setup
lastSetupIsSell   = not lastSetupIsBuy
brokeResistance   = ta.barssince(low > TDSTResistance) < sinceBuyNine // did full candle trade above tdst resistance generated by last buy setup
buyCancelationFilter = lastSetupIsSell or brokeResistance

// Cancelation Qualifier 1 - Last buy setup larger than the one before but less then 1.618 times it's size
float lastBuyLowestVal = na
lastBuyLowestVal         := buySetup == 9 ? lowest9 : (buySetup > 9 ? math.min(nz(lastBuyLowestVal[1]), low) : nz(lastBuyLowestVal[1]))
lastBuySetupRange        = TDSTResistance - lastBuyLowestVal
float secondLastBuyRange = na
secondLastBuyRange       := buySetup == 9 ? nz(lastBuySetupRange[1]) : nz(secondLastBuyRange[1])
buyCancelationQualifier1 = (secondLastBuyRange <= lastBuySetupRange) and (lastBuySetupRange < 1.618 * secondLastBuyRange)

// Cancelation Qualifier 2 - Last buy setup not within the last one
float lastBuyHighestClose = na
highestClose9 = ta.highest(close, 9)
lastBuyHighestClose      := buySetup == 9 ? highestClose9 : (buySetup > 9 ? math.max(nz(lastBuyHighestClose[1]), close) : nz(lastBuyHighestClose[1]))
float lastBuyLowestClose = na
lowestClose9 = ta.lowest(close, 9)
lastBuyLowestClose       := buySetup == 9 ? lowestClose9 : (buySetup > 9 ? math.min(nz(lastBuyLowestClose[1]), close) : nz(lastBuyLowestClose[1]))
float secondLastBuyHighestVal = na
secondLastBuyHighestVal  := buySetup == 9 ? TDSTResistance[1] : nz(secondLastBuyHighestVal[1])
float secondLastBuyLowestVal = na
secondLastBuyLowestVal   := buySetup == 9 ? nz(lastBuyLowestVal[1]) : nz(secondLastBuyLowestVal[1])

aboveSecondLastBuyRange  = lastBuyHighestClose > secondLastBuyHighestVal
belowSecondLastBuyRange  = lastBuyLowestClose < secondLastBuyLowestVal
float sinceSecondLastBuy = na
sinceSecondLastBuy       := buySetup == 9 ? nz(sinceBuyNine[1])+1 : nz(sinceSecondLastBuy[1])+1
sellSetupBetweenTwoBuys  = sinceSecondLastBuy > sinceSellNine and sinceSellNine > sinceBuyNine
buyCancelationQualifier2 = aboveSecondLastBuyRange or belowSecondLastBuyRange or sellSetupBetweenTwoBuys

// Recycle Qualifier
recycleQualifier = buySetup == 18 // To do, a bit unclear

// Miscellaneous
initiateBuyCountdown  = (close <= low[2]) and (buySetup == 9 or ta.barssince(close[1] <= low[3])+1 > sinceBuyNine)
float buyCountdown = na
buyCountdownCompleted = low[1] <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0)
newBuySetupDuringCountdown = ta.barssince(buySetup == 9) < ta.barssince(buyCountdown[1] == 1)
    	
// Countdown Logic
buyCountdown := if buyCancelationFilter
	0
else
    if nz(buyCountdown[1]) == 0            // previous bar buyCountdown is 0
        if initiateBuyCountdown
            1
        else
            0
    else
        if nz(buyCountdown[1]) < 13        // previous bar 0 < buyCountdown < 13
            if newBuySetupDuringCountdown and (buyCancelationQualifier1 or buyCancelationQualifier2)
                1
            else
                if close <= low[2]
                    nz(buyCountdown[1]) + 1
                else
                    nz(buyCountdown[1])
        else                               // previous bar buyCountdown is 13
            if newBuySetupDuringCountdown and (buyCancelationQualifier1 or buyCancelationQualifier2)
                1
            else
                if buyCountdownCompleted
                    0
                else
                    nz(buyCountdown[1])    // completion is deferred until condition is satisfied

// Number Plots	
plotchar(buyCountdown!=buyCountdown[1] and buyCountdown==1 and showBuyCountdown,char='',text='1',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==2 and showBuyCountdown,char='',text='2',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==3 and showBuyCountdown,char='',text='3',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==4 and showBuyCountdown,char='',text='4',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==5 and showBuyCountdown,char='',text='5',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==6 and showBuyCountdown,char='',text='6',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==7 and showBuyCountdown,char='',text='7',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==8 and showBuyCountdown,char='',text='8',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==9 and showBuyCountdown,char='',text='9',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==10 and showBuyCountdown,char='',text='10',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==11 and showBuyCountdown,char='',text='11',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==12 and showBuyCountdown,char='',text='12',color = color.red,location=location.belowbar)
plotshape(buyCountdown==13 and close <= low[2] and low > ta.valuewhen(nz(buyCountdown[1]) == 7 and showBuyCountdown, close, 0), style=shape.cross, color = color.red, location=location.belowbar)
plotshape(low <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0) and buyCountdown==13 and showBuyCountdown,text='13',textcolor = color.red,style=shape.arrowup,size=size.small,color = color.green,location=location.belowbar)

// COUNTDOWN - SELL //

// Cancelation Filter
brokeSupport = ta.barssince(high < TDSTSupport) < sinceSellNine // full candle traded below current tdst support
sellCancelationFilter = lastSetupIsBuy or brokeSupport

// Cancelation Qualifier 1
float lastSellHighestVal = na
lastSellHighestVal        := sellSetup == 9 ? highest9 : (sellSetup > 9 ? math.max(nz(lastSellHighestVal[1]), high) : nz(lastSellHighestVal[1]))
lastSellSetupRange        = lastSellHighestVal - TDSTSupport
float secondLastSellRange = na
secondLastSellRange       := sellSetup == 9 ? nz(lastSellSetupRange[1]) : nz(secondLastSellRange[1])
sellCancelationQualifier1 = (secondLastSellRange <= lastSellSetupRange) and (lastSellSetupRange < 1.618 * secondLastSellRange)

// Cancelation Qualifier 2
float lastSellHighestClose = na
lastSellHighestClose      := sellSetup == 9 ? highestClose9 : (sellSetup > 9 ? math.max(nz(lastSellHighestClose[1]), close) : nz(lastSellHighestClose[1]))
float lastSellLowestClose = na
lastSellLowestClose       := sellSetup == 9 ? lowestClose9 : (sellSetup > 9 ? math.min(nz(lastSellLowestClose[1]), close) : nz(lastSellLowestClose[1]))
float secondLastSellHighestVal = na
secondLastSellHighestVal  := sellSetup == 9 ? nz(lastSellHighestVal[1]) : nz(secondLastSellHighestVal[1])
float secondLastSellLowestVal = na
secondLastSellLowestVal   := sellSetup == 9 ? TDSTSupport[1] : nz(secondLastSellLowestVal[1])

aboveSecondLastSellRange  = lastSellHighestClose > secondLastSellHighestVal
belowSecondLastSellRange  = lastSellLowestClose < secondLastSellLowestVal
float sinceSecondLastSell = na
sinceSecondLastSell       := sellSetup == 9 ? nz(sinceSellNine[1])+1 : nz(sinceSecondLastSell[1])+1
buySetupBetweenTwoSells   = sinceSecondLastSell > sinceBuyNine and sinceBuyNine > sinceSellNine
sellCancelationQualifier2 = aboveSecondLastSellRange or belowSecondLastSellRange or buySetupBetweenTwoSells

// Miscellaneous
float sellCountdown = na
initiateSellCountdown       = (close >= high[2]) and (sellSetup == 9 or ta.barssince(close[1] >= high[3])+1 > sinceSellNine)
sellCountdownCompleted      = high[1] >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0)
newSellSetupDuringCountdown = ta.barssince(sellSetup == 9) < ta.barssince(sellCountdown[1] == 1)

// Countdown Logic
sellCountdown := if sellCancelationFilter
	0
else
    if nz(sellCountdown[1]) == 0            // previous bar sellCountdown is 0
        if initiateSellCountdown
            1
        else
            0
    else
        if nz(sellCountdown[1]) < 13        // previous bar 0 < sellCountdown < 13
            if newSellSetupDuringCountdown and (sellCancelationQualifier1 or sellCancelationQualifier2)
                1
            else
                if close >= high[2]
                    nz(sellCountdown[1]) + 1
                else
                    nz(sellCountdown[1])
        else                                // previous bar sellCountdown is 13
            if newSellSetupDuringCountdown and (sellCancelationQualifier1 or sellCancelationQualifier1)
                1
            else
                if sellCountdownCompleted
                    0
                else
                    nz(sellCountdown[1])    // completion is deferred until condition is satisfied

// Number Plots
plotchar(sellCountdown!=sellCountdown[1] and sellCountdown==1 and showSellCountdown,char='',text='1',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==2 and showSellCountdown,char='',text='2',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==3 and showSellCountdown,char='',text='3',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==4 and showSellCountdown,char='',text='4',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==5 and showSellCountdown,char='',text='5',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==6 and showSellCountdown,char='',text='6',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==7 and showSellCountdown,char='',text='7',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==8 and showSellCountdown,char='',text='8',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==9 and showSellCountdown,char='',text='9',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==10 and showSellCountdown,char='',text='10',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==11 and showSellCountdown,char='',text='11',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==12 and showSellCountdown,char='',text='12',color = color.green,location=location.belowbar)
plotshape(sellCountdown==13 and close >= high[2] and high < ta.valuewhen(nz(sellCountdown[1]) == 7 and showSellCountdown, close, 0), style=shape.cross, color = color.green, location=location.belowbar)
plotshape(high >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0) and sellCountdown==13 and showSellCountdown,text='13',textcolor = color.green,style=shape.arrowdown,size=size.small,color = color.red,location=location.belowbar)

// RISK LINES //
float buyCountdownLow = na
buyCountdownLow := buyCountdown == 1 and nz(buyCountdown[1]) != 1 ? low : math.min(nz(buyCountdownLow[1]), low)
float buyRiskLine = na
tachangeBuy = ta.valuewhen(ta.change(buyCountdownLow)!=0, high, 0)
buyRiskLine := buyCountdown == 13 and low <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0) ? 2*buyCountdownLow - tachangeBuy : nz(buyRiskLine[1])
buyRiskLineIntact = high >= buyRiskLine and (ta.barssince(high < buyRiskLine) > ta.barssince(buyCountdown == 13 and low <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0)))
plot(buyRiskLineIntact and showRiskLines ? buyRiskLine : na, style=plot.style_circles, linewidth=1, color=color.purple)
float sellCountdownHigh = na
sellCountdownHigh := sellCountdown == 1 and nz(sellCountdown[1]) != 1 ? high : math.max(nz(sellCountdownHigh[1]), high)
float sellRiskLine = na
tachangeSell = ta.valuewhen(ta.change(sellCountdownHigh)!=0, low, 0)
sellRiskLine := sellCountdown == 13 and high >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0) ? 2*sellCountdownHigh - tachangeSell : nz(sellRiskLine[1])
sellRiskLineIntact = low <= sellRiskLine and (ta.barssince(low > sellRiskLine) > ta.barssince(sellCountdown == 13 and high >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0)))
plot(sellRiskLineIntact and showRiskLines ? sellRiskLine : na, style=plot.style_circles, linewidth=1, color=color.purple)