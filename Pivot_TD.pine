//@version=5
indicator("Pivot Points Standard + TD", "Pivots + TD", overlay=true, max_lines_count=500, max_labels_count=500)

pivotTypeInput = input.string(title="Type", defval="Traditional", options=["Traditional", "Fibonacci", "Woodie", "Classic", "DM", "Camarilla"])
pivotAnchorInput = input.string(title="Pivots Timeframe", defval="Auto", options=["Auto", "Daily", "Weekly", "Monthly", "Quarterly", "Yearly", "Biyearly", "Triyearly", "Quinquennially", "Decennially"])
maxHistoricalPivotsInput = input.int(title="Number of Pivots Back", defval=15, minval=1, maxval=200, display = display.data_window)
isDailyBasedInput = input.bool(title="Use Daily-based Values", defval=true, display = display.data_window, tooltip="When this option is unchecked, Pivot Points will use intraday data while calculating on intraday charts. If Extended Hours are displayed on the chart, they will be taken into account during the pivot level calculation. If intraday OHLC values are different from daily-based values (normal for stocks), the pivot levels will also differ.")
showLabelsInput = input.bool(title="Show Labels", defval=true, group="labels", display = display.data_window)
showPricesInput = input.bool(title="Show Prices", defval=true, group="labels", display = display.data_window)
positionLabelsInput = input.string("Left", "Labels Position", options=["Left", "Right"], group="labels", display = display.data_window)
linewidthInput = input.int(title="Line Width", defval=1, minval=1, maxval=100, group="levels", display = display.data_window)

DEFAULT_COLOR = #FB8C00
pColorInput = input.color(DEFAULT_COLOR, "P", inline="P", group="levels", display = display.data_window)
pShowInput = input.bool(true, "", inline="P", group="levels", display = display.data_window)
s1ColorInput = input.color(DEFAULT_COLOR, "S1", inline="S1/R1" , group="levels", display = display.data_window)
s1ShowInput = input.bool(true, "", inline="S1/R1", group="levels", display = display.data_window)
r1ColorInput = input.color(DEFAULT_COLOR, "R1", inline="S1/R1", group="levels", display = display.data_window)
r1ShowInput = input.bool(true, "", inline="S1/R1", group="levels", display = display.data_window)
s2ColorInput = input.color(DEFAULT_COLOR, "S2", inline="S2/R2", group="levels", display = display.data_window)
s2ShowInput = input.bool(true, "", inline="S2/R2", group="levels", display = display.data_window)
r2ColorInput = input.color(DEFAULT_COLOR, "R2", inline="S2/R2", group="levels", display = display.data_window)
r2ShowInput = input.bool(true, "", inline="S2/R2", group="levels", tooltip = "Not applicable to DM", display = display.data_window)
s3ColorInput = input.color(DEFAULT_COLOR, "S3", inline="S3/R3", group="levels", display = display.data_window)
s3ShowInput = input.bool(true, "", inline="S3/R3", group="levels", display = display.data_window)
r3ColorInput = input.color(DEFAULT_COLOR, "R3", inline="S3/R3", group="levels", display = display.data_window)
r3ShowInput = input.bool(true, "", inline="S3/R3", group="levels", tooltip = "Not applicable to DM", display = display.data_window)
s4ColorInput = input.color(DEFAULT_COLOR, "S4", inline="S4/R4", group="levels", display = display.data_window)
s4ShowInput = input.bool(true, "", inline="S4/R4", group="levels", display = display.data_window)
r4ColorInput = input.color(DEFAULT_COLOR, "R4", inline="S4/R4", group="levels", display = display.data_window)
r4ShowInput = input.bool(true, "", inline="S4/R4", group="levels", tooltip = "Not applicable to: Fibonacci, DM", display = display.data_window)
s5ColorInput = input.color(DEFAULT_COLOR, "S5", inline="S5/R5", group="levels", display = display.data_window)
s5ShowInput = input.bool(true, "", inline="S5/R5", group="levels", display = display.data_window)
r5ColorInput = input.color(DEFAULT_COLOR, "R5", inline="S5/R5", group="levels", display = display.data_window)
r5ShowInput = input.bool(true, "", inline="S5/R5", group="levels", tooltip = "Not applicable to: Fibonacci, Woodie, Classic, DM", display = display.data_window)

type graphicSettings
    string levelName
    color levelColor
    bool showLevel

var graphicSettingsArray = array.from(
      graphicSettings.new(" P", pColorInput, pShowInput),
      graphicSettings.new("R1", r1ColorInput, r1ShowInput), graphicSettings.new("S1", s1ColorInput, s1ShowInput),
      graphicSettings.new("R2", r2ColorInput, r2ShowInput), graphicSettings.new("S2", s2ColorInput, s2ShowInput),
      graphicSettings.new("R3", r3ColorInput, r3ShowInput), graphicSettings.new("S3", s3ColorInput, s3ShowInput),
      graphicSettings.new("R4", r4ColorInput, r4ShowInput), graphicSettings.new("S4", s4ColorInput, s4ShowInput),
      graphicSettings.new("R5", r5ColorInput, r5ShowInput), graphicSettings.new("S5", s5ColorInput, s5ShowInput))

autoAnchor = switch
    timeframe.isintraday => timeframe.multiplier <= 15 ? "1D" : "1W"
    timeframe.isdaily    => "1M"
    => "12M"

pivotTimeframe = switch pivotAnchorInput
    "Auto"      => autoAnchor
    "Daily"     => "1D"
    "Weekly"    => "1W"
    "Monthly"   => "1M"
    "Quarterly" => "3M"
    => "12M"

//@variable The number of years in the selected Pivot period
pivotYearMultiplier = switch pivotAnchorInput
    "Biyearly"       => 2
    "Triyearly"      => 3
    "Quinquennially" => 5
    "Decennially"    => 10
    => 1

//@variable The number of values in the pivots of the selected type
numOfPivotLevels = switch pivotTypeInput
    "Traditional" => 11
    "Camarilla"   => 11
    "Woodie"      => 9
    "Classic"     => 9
    "Fibonacci"   => 7
    "DM"          => 3

type pivotGraphic
    line pivotLine
    label pivotLabel

method delete(pivotGraphic graphic) =>
    graphic.pivotLine.delete()
    graphic.pivotLabel.delete()

var drawnGraphics = matrix.new<pivotGraphic>()

localPivotTimeframeChange = timeframe.change(pivotTimeframe) and year % pivotYearMultiplier == 0
securityPivotTimeframeChange = timeframe.change(timeframe.period) and year % pivotYearMultiplier == 0

pivotTimeframeChangeCounter(condition) => 
    var count = 0
    if condition and bar_index > 0
        count += 1
    count

localPivots = ta.pivot_point_levels(pivotTypeInput, localPivotTimeframeChange)
securityPivotPointsArray = ta.pivot_point_levels(pivotTypeInput, securityPivotTimeframeChange)

securityTimeframe = timeframe.isintraday ? "1D" : timeframe.period
[securityPivots, securityPivotCounter] = request.security(syminfo.tickerid, pivotTimeframe, [securityPivotPointsArray, pivotTimeframeChangeCounter(securityPivotTimeframeChange)], lookahead = barmerge.lookahead_on)
pivotPointsArray = isDailyBasedInput ? securityPivots : localPivots

//@function Sets the ending points of the currently active pivots to `endTime`.
affixOldPivots(endTime) =>
    if drawnGraphics.rows() > 0
        lastGraphics = drawnGraphics.row(drawnGraphics.rows() - 1)

        for graphic in lastGraphics
            graphic.pivotLine.set_x2(endTime)
            if positionLabelsInput == "Right"
                graphic.pivotLabel.set_x(endTime)

//@function Draws pivot lines and labels from `startTime` to the approximate end of the period.
drawNewPivots(startTime) =>
    
    newGraphics = array.new<pivotGraphic>()

    for [index, coord] in pivotPointsArray
        levelSettings = graphicSettingsArray.get(index)
        if not na(coord) and levelSettings.showLevel
            lineEndTime = startTime + timeframe.in_seconds(pivotTimeframe) * 1000 * pivotYearMultiplier
            pivotLine = line.new(startTime, coord, lineEndTime, coord, xloc = xloc.bar_time, color=levelSettings.levelColor, width=linewidthInput)
            pivotLabel = label.new(x = positionLabelsInput == "Left" ? startTime : lineEndTime,
                               y = coord,
                               text = (showLabelsInput ? levelSettings.levelName + " " : "") + (showPricesInput ? "(" + str.tostring(coord, format.mintick) + ")" : ""),
                               style = positionLabelsInput == "Left" ? label.style_label_right : label.style_label_left,
                               textcolor = levelSettings.levelColor,
                               color = #00000000,
                               xloc=xloc.bar_time)
            
            newGraphics.push(pivotGraphic.new(pivotLine, pivotLabel))
    
    drawnGraphics.add_row(array_id = newGraphics)

    if drawnGraphics.rows() > maxHistoricalPivotsInput
        oldGraphics = drawnGraphics.remove_row(0)
        
        for graphic in oldGraphics
            graphic.delete()


localPivotDrawConditionStatic = not isDailyBasedInput and localPivotTimeframeChange
securityPivotDrawConditionStatic = isDailyBasedInput and securityPivotCounter != securityPivotCounter[1]

var isMultiYearly = array.from("Biyearly", "Triyearly", "Quinquennially", "Decennially").includes(pivotAnchorInput)
localPivotDrawConditionDeveloping = not isDailyBasedInput and time_close == time_close(pivotTimeframe) and not isMultiYearly 
securityPivotDrawConditionDeveloping = false

if (securityPivotDrawConditionStatic or localPivotDrawConditionStatic)
    affixOldPivots(time)
    drawNewPivots(time)

// If possible, draw pivots from the beginning of the chart if none were found
var FIRST_BAR_TIME = time
if (barstate.islastconfirmedhistory and drawnGraphics.columns() == 0)

    if not na(securityPivots) and securityPivotCounter > 0
        if isDailyBasedInput
            drawNewPivots(FIRST_BAR_TIME)
        else 
            runtime.error("Not enough intraday data to calculate Pivot Points. Lower the Pivots Timeframe or turn on the 'Use Daily-based Values' option in the indicator settings.")
    else
        runtime.error("Not enough data to calculate Pivot Points. Lower the Pivots Timeframe in the indicator settings.")



// ==============================================
// TD Sequential - Setup and Countdown
// Igor Molnar, 2018. Convert to version5 by SM19
// ==============================================
// Tom DeMark's Sequential indicator with both Setup and Countdown components implemented 
// according to the rules outlined in: DeMark Indicators by Jason Perl (Bloomberg Market Essentials)
// 
// Feel free to PM me your comments, suggestions and bug reports at https://www.tradingview.com/u/Yngvar/

// OPTIONAL PARAMETERS //

// transp            = input(0, title="Number Transparency", group = "TD")
priceFlipRequired = input(true, title="Setup - Require price flip for initiation", group = "TD")
showBuySetup      = input(true, title="Setup - Show Buy Setup", group = "TD")
showSellSetup     = input(true, title="Setup - Show Sell Setup", group = "TD")
showOnlySetupNine = input(false,title="Setup - Show Only Completed Nines", group = "TD")
showResistance    = input(true, title="Setup Trend - Show Resistance Lines", group = "TD")
showSupport       = input(true, title="Setup Trend - Show Support Lines", group = "TD")
showBuyCountdown  = input(true, title="Countdown - Show Buy Countdown", group = "TD")
showSellCountdown = input(true, title="Countdown - Show Sell Countdown", group = "TD")
showRiskLines     = input(false, title="Risk Lines - Show (Beta)", group = "TD")

// PRICE FLIP AND SETUP //
buySetup = 0
buySetup := if close < close[4]
    if priceFlipRequired
        if close[1] > close[5] or 0 < nz(buySetup[1])
            nz(buySetup[1]) + 1
        else
            0
    else
        if nz(buySetup[1]) == 9
            1
        else
            nz(buySetup[1]) + 1
else
    0

sellSetup = 0
sellSetup := if close > close[4]
    if priceFlipRequired
        if close[1] < close[5] or 0 < nz(sellSetup[1])
            nz(sellSetup[1]) + 1
        else
            0
    else
        if nz(sellSetup[1]) == 9
            1
        else
            nz(sellSetup[1]) + 1
else
    0

// PERFECTED SETUP CONDITIONS //

sellPerfection = sellSetup==9 and ((high > high[2] and high > high[3]) or (high[1] > high[2] and high[1] > high[3]))
buyPerfection  = buySetup==9 and ((low < low[2] and low < low[3]) or (low[1] < low[2] and low[1] < low[3]))

// NUMBER PLOTS //

plotchar(sellSetup==1 and showSellSetup and not showOnlySetupNine,char='1',color = color.green,location=location.abovebar)
plotchar(sellSetup==2 and showSellSetup and not showOnlySetupNine,char='2',color = color.green,location=location.abovebar)
plotchar(sellSetup==3 and showSellSetup and not showOnlySetupNine,char='3',color = color.green,location=location.abovebar)
plotchar(sellSetup==4 and showSellSetup and not showOnlySetupNine,char='4',color = color.green,location=location.abovebar)
plotchar(sellSetup==5 and showSellSetup and not showOnlySetupNine,char='5',color = color.green,location=location.abovebar)
plotchar(sellSetup==6 and showSellSetup and not showOnlySetupNine,char='6',color = color.green,location=location.abovebar)
plotchar(sellSetup==7 and showSellSetup and not showOnlySetupNine,char='7',color = color.green,location=location.abovebar)
plotchar(sellSetup==8 and showSellSetup and not showOnlySetupNine,char='8',color = color.green,location=location.abovebar)
plotshape(sellSetup==9 and showSellSetup and not sellPerfection,style=shape.arrowdown,size=size.small,color = color.red,location=location.abovebar,text="9",textcolor = color.green)
plotshape(sellPerfection and showSellSetup,style=shape.arrowdown,size=size.small,color = color.red,location=location.abovebar,text="9P",textcolor = color.green)

plotchar(buySetup==1 and showBuySetup and not showOnlySetupNine,char='1',color = color.red,location=location.abovebar)
plotchar(buySetup==2 and showBuySetup and not showOnlySetupNine,char='2',color = color.red,location=location.abovebar)
plotchar(buySetup==3 and showBuySetup and not showOnlySetupNine,char='3',color = color.red,location=location.abovebar)
plotchar(buySetup==4 and showBuySetup and not showOnlySetupNine,char='4',color = color.red,location=location.abovebar)
plotchar(buySetup==5 and showBuySetup and not showOnlySetupNine,char='5',color = color.red,location=location.abovebar)
plotchar(buySetup==6 and showBuySetup and not showOnlySetupNine,char='6',color = color.red,location=location.abovebar)
plotchar(buySetup==7 and showBuySetup and not showOnlySetupNine,char='7',color = color.red,location=location.abovebar)
plotchar(buySetup==8 and showBuySetup and not showOnlySetupNine,char='8',color = color.red,location=location.abovebar)
plotshape(buyPerfection and showBuySetup,style=shape.arrowup,size=size.small,color = color.green,location=location.abovebar,text="9P",textcolor = color.red)
plotshape(buySetup==9 and not buyPerfection and showBuySetup,style=shape.arrowup,size=size.small,color = color.green,location=location.abovebar,text="9",textcolor = color.red)

// ALERTS //

alertcondition(ta.barssince(sellSetup == 9) == 1, title='Sell Setup Completed', message='TD Sell Setup Completed')
alertcondition(ta.barssince(buySetup == 9) == 1, title='Buy Setup Completed', message='TD Buy Setup Completed')

// SETUP TREND LINES //
float TDSTSupport = na
lowest9 = ta.lowest(low, 9)
TDSTSupport := sellSetup == 9 ? lowest9 : nz(TDSTSupport[1])
TDSTSupportIntact = close >= TDSTSupport and (ta.barssince(close < TDSTSupport) > ta.barssince(sellSetup == 9))
plot(TDSTSupportIntact and showSupport ? TDSTSupport : na, style=plot.style_circles, linewidth=1, color = color.green)

float TDSTResistance = na
highest9 = ta.highest(high, 9)
TDSTResistance := buySetup == 9 ? highest9 : nz(TDSTResistance[1])
TDSTResistanceIntact = close <= TDSTResistance and (ta.barssince(close > TDSTResistance) > ta.barssince(buySetup == 9))
plot(TDSTResistanceIntact and showResistance ? TDSTResistance : na, style=plot.style_circles, linewidth=1, color = color.red)

// COUNTDOWN - BUY //

// Cancelation Filter
sinceBuyNine      = ta.barssince(buySetup == 9)
sinceSellNine     = ta.barssince(sellSetup == 9)
lastSetupIsBuy    = sinceBuyNine < sinceSellNine // last completed setup is a buy setup
lastSetupIsSell   = not lastSetupIsBuy
brokeResistance   = ta.barssince(low > TDSTResistance) < sinceBuyNine // did full candle trade above tdst resistance generated by last buy setup
buyCancelationFilter = lastSetupIsSell or brokeResistance

// Cancelation Qualifier 1 - Last buy setup larger than the one before but less then 1.618 times it's size
float lastBuyLowestVal = na
lastBuyLowestVal         := buySetup == 9 ? lowest9 : (buySetup > 9 ? math.min(nz(lastBuyLowestVal[1]), low) : nz(lastBuyLowestVal[1]))
lastBuySetupRange        = TDSTResistance - lastBuyLowestVal
float secondLastBuyRange = na
secondLastBuyRange       := buySetup == 9 ? nz(lastBuySetupRange[1]) : nz(secondLastBuyRange[1])
buyCancelationQualifier1 = (secondLastBuyRange <= lastBuySetupRange) and (lastBuySetupRange < 1.618 * secondLastBuyRange)

// Cancelation Qualifier 2 - Last buy setup not within the last one
float lastBuyHighestClose = na
highestClose9 = ta.highest(close, 9)
lastBuyHighestClose      := buySetup == 9 ? highestClose9 : (buySetup > 9 ? math.max(nz(lastBuyHighestClose[1]), close) : nz(lastBuyHighestClose[1]))
float lastBuyLowestClose = na
lowestClose9 = ta.lowest(close, 9)
lastBuyLowestClose       := buySetup == 9 ? lowestClose9 : (buySetup > 9 ? math.min(nz(lastBuyLowestClose[1]), close) : nz(lastBuyLowestClose[1]))
float secondLastBuyHighestVal = na
secondLastBuyHighestVal  := buySetup == 9 ? TDSTResistance[1] : nz(secondLastBuyHighestVal[1])
float secondLastBuyLowestVal = na
secondLastBuyLowestVal   := buySetup == 9 ? nz(lastBuyLowestVal[1]) : nz(secondLastBuyLowestVal[1])

aboveSecondLastBuyRange  = lastBuyHighestClose > secondLastBuyHighestVal
belowSecondLastBuyRange  = lastBuyLowestClose < secondLastBuyLowestVal
float sinceSecondLastBuy = na
sinceSecondLastBuy       := buySetup == 9 ? nz(sinceBuyNine[1])+1 : nz(sinceSecondLastBuy[1])+1
sellSetupBetweenTwoBuys  = sinceSecondLastBuy > sinceSellNine and sinceSellNine > sinceBuyNine
buyCancelationQualifier2 = aboveSecondLastBuyRange or belowSecondLastBuyRange or sellSetupBetweenTwoBuys

// Recycle Qualifier
recycleQualifier = buySetup == 18 // To do, a bit unclear

// Miscellaneous
initiateBuyCountdown  = (close <= low[2]) and (buySetup == 9 or ta.barssince(close[1] <= low[3])+1 > sinceBuyNine)
float buyCountdown = na
buyCountdownCompleted = low[1] <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0)
newBuySetupDuringCountdown = ta.barssince(buySetup == 9) < ta.barssince(buyCountdown[1] == 1)
    	
// Countdown Logic
buyCountdown := if buyCancelationFilter
	0
else
    if nz(buyCountdown[1]) == 0            // previous bar buyCountdown is 0
        if initiateBuyCountdown
            1
        else
            0
    else
        if nz(buyCountdown[1]) < 13        // previous bar 0 < buyCountdown < 13
            if newBuySetupDuringCountdown and (buyCancelationQualifier1 or buyCancelationQualifier2)
                1
            else
                if close <= low[2]
                    nz(buyCountdown[1]) + 1
                else
                    nz(buyCountdown[1])
        else                               // previous bar buyCountdown is 13
            if newBuySetupDuringCountdown and (buyCancelationQualifier1 or buyCancelationQualifier2)
                1
            else
                if buyCountdownCompleted
                    0
                else
                    nz(buyCountdown[1])    // completion is deferred until condition is satisfied

// Number Plots	
plotchar(buyCountdown!=buyCountdown[1] and buyCountdown==1 and showBuyCountdown,char='',text='1',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==2 and showBuyCountdown,char='',text='2',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==3 and showBuyCountdown,char='',text='3',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==4 and showBuyCountdown,char='',text='4',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==5 and showBuyCountdown,char='',text='5',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==6 and showBuyCountdown,char='',text='6',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==7 and showBuyCountdown,char='',text='7',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==8 and showBuyCountdown,char='',text='8',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==9 and showBuyCountdown,char='',text='9',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==10 and showBuyCountdown,char='',text='10',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==11 and showBuyCountdown,char='',text='11',color = color.red,location=location.belowbar)
plotchar(buyCountdown>buyCountdown[1] and buyCountdown==12 and showBuyCountdown,char='',text='12',color = color.red,location=location.belowbar)
plotshape(buyCountdown==13 and close <= low[2] and low > ta.valuewhen(nz(buyCountdown[1]) == 7 and showBuyCountdown, close, 0), style=shape.cross, color = color.red, location=location.belowbar)
plotshape(low <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0) and buyCountdown==13 and showBuyCountdown,text='13',textcolor = color.red,style=shape.arrowup,size=size.small,color = color.green,location=location.belowbar)

// COUNTDOWN - SELL //

// Cancelation Filter
brokeSupport = ta.barssince(high < TDSTSupport) < sinceSellNine // full candle traded below current tdst support
sellCancelationFilter = lastSetupIsBuy or brokeSupport

// Cancelation Qualifier 1
float lastSellHighestVal = na
lastSellHighestVal        := sellSetup == 9 ? highest9 : (sellSetup > 9 ? math.max(nz(lastSellHighestVal[1]), high) : nz(lastSellHighestVal[1]))
lastSellSetupRange        = lastSellHighestVal - TDSTSupport
float secondLastSellRange = na
secondLastSellRange       := sellSetup == 9 ? nz(lastSellSetupRange[1]) : nz(secondLastSellRange[1])
sellCancelationQualifier1 = (secondLastSellRange <= lastSellSetupRange) and (lastSellSetupRange < 1.618 * secondLastSellRange)

// Cancelation Qualifier 2
float lastSellHighestClose = na
lastSellHighestClose      := sellSetup == 9 ? highestClose9 : (sellSetup > 9 ? math.max(nz(lastSellHighestClose[1]), close) : nz(lastSellHighestClose[1]))
float lastSellLowestClose = na
lastSellLowestClose       := sellSetup == 9 ? lowestClose9 : (sellSetup > 9 ? math.min(nz(lastSellLowestClose[1]), close) : nz(lastSellLowestClose[1]))
float secondLastSellHighestVal = na
secondLastSellHighestVal  := sellSetup == 9 ? nz(lastSellHighestVal[1]) : nz(secondLastSellHighestVal[1])
float secondLastSellLowestVal = na
secondLastSellLowestVal   := sellSetup == 9 ? TDSTSupport[1] : nz(secondLastSellLowestVal[1])

aboveSecondLastSellRange  = lastSellHighestClose > secondLastSellHighestVal
belowSecondLastSellRange  = lastSellLowestClose < secondLastSellLowestVal
float sinceSecondLastSell = na
sinceSecondLastSell       := sellSetup == 9 ? nz(sinceSellNine[1])+1 : nz(sinceSecondLastSell[1])+1
buySetupBetweenTwoSells   = sinceSecondLastSell > sinceBuyNine and sinceBuyNine > sinceSellNine
sellCancelationQualifier2 = aboveSecondLastSellRange or belowSecondLastSellRange or buySetupBetweenTwoSells

// Miscellaneous
float sellCountdown = na
initiateSellCountdown       = (close >= high[2]) and (sellSetup == 9 or ta.barssince(close[1] >= high[3])+1 > sinceSellNine)
sellCountdownCompleted      = high[1] >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0)
newSellSetupDuringCountdown = ta.barssince(sellSetup == 9) < ta.barssince(sellCountdown[1] == 1)

// Countdown Logic
sellCountdown := if sellCancelationFilter
	0
else
    if nz(sellCountdown[1]) == 0            // previous bar sellCountdown is 0
        if initiateSellCountdown
            1
        else
            0
    else
        if nz(sellCountdown[1]) < 13        // previous bar 0 < sellCountdown < 13
            if newSellSetupDuringCountdown and (sellCancelationQualifier1 or sellCancelationQualifier2)
                1
            else
                if close >= high[2]
                    nz(sellCountdown[1]) + 1
                else
                    nz(sellCountdown[1])
        else                                // previous bar sellCountdown is 13
            if newSellSetupDuringCountdown and (sellCancelationQualifier1 or sellCancelationQualifier1)
                1
            else
                if sellCountdownCompleted
                    0
                else
                    nz(sellCountdown[1])    // completion is deferred until condition is satisfied

// Number Plots
plotchar(sellCountdown!=sellCountdown[1] and sellCountdown==1 and showSellCountdown,char='',text='1',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==2 and showSellCountdown,char='',text='2',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==3 and showSellCountdown,char='',text='3',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==4 and showSellCountdown,char='',text='4',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==5 and showSellCountdown,char='',text='5',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==6 and showSellCountdown,char='',text='6',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==7 and showSellCountdown,char='',text='7',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==8 and showSellCountdown,char='',text='8',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==9 and showSellCountdown,char='',text='9',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==10 and showSellCountdown,char='',text='10',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==11 and showSellCountdown,char='',text='11',color = color.green,location=location.belowbar)
plotchar(sellCountdown>sellCountdown[1] and sellCountdown==12 and showSellCountdown,char='',text='12',color = color.green,location=location.belowbar)
plotshape(sellCountdown==13 and close >= high[2] and high < ta.valuewhen(nz(sellCountdown[1]) == 7 and showSellCountdown, close, 0), style=shape.cross, color = color.green, location=location.belowbar)
plotshape(high >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0) and sellCountdown==13 and showSellCountdown,text='13',textcolor = color.green,style=shape.arrowdown,size=size.small,color = color.red,location=location.belowbar)

// RISK LINES //
float buyCountdownLow = na
buyCountdownLow := buyCountdown == 1 and nz(buyCountdown[1]) != 1 ? low : math.min(nz(buyCountdownLow[1]), low)
float buyRiskLine = na
tachangeBuy = ta.valuewhen(ta.change(buyCountdownLow)!=0, high, 0)
buyRiskLine := buyCountdown == 13 and low <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0) ? 2*buyCountdownLow - tachangeBuy : nz(buyRiskLine[1])
buyRiskLineIntact = high >= buyRiskLine and (ta.barssince(high < buyRiskLine) > ta.barssince(buyCountdown == 13 and low <= ta.valuewhen(nz(buyCountdown[1]) == 7, close, 0)))
plot(buyRiskLineIntact and showRiskLines ? buyRiskLine : na, style=plot.style_circles, linewidth=1, color=color.purple)
float sellCountdownHigh = na
sellCountdownHigh := sellCountdown == 1 and nz(sellCountdown[1]) != 1 ? high : math.max(nz(sellCountdownHigh[1]), high)
float sellRiskLine = na
tachangeSell = ta.valuewhen(ta.change(sellCountdownHigh)!=0, low, 0)
sellRiskLine := sellCountdown == 13 and high >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0) ? 2*sellCountdownHigh - tachangeSell : nz(sellRiskLine[1])
sellRiskLineIntact = low <= sellRiskLine and (ta.barssince(low > sellRiskLine) > ta.barssince(sellCountdown == 13 and high >= ta.valuewhen(nz(sellCountdown[1]) == 7, close, 0)))
plot(sellRiskLineIntact and showRiskLines ? sellRiskLine : na, style=plot.style_circles, linewidth=1, color=color.purple)
